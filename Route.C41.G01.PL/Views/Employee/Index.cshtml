@model IEnumerable<EmployeeResponseViewModel>

@{
    ViewData["Title"] = "Index";

    string viewDataMessage = ViewData["Message"] as string; // Enforce type Safety
    
    string viewBagMessage = ViewBag.Message; // Can't Enforce type Safety

}

@if (!string.IsNullOrEmpty(TempData["Message"] as string))
{
<div class="alert alert-primary">
    @TempData["Message"]
</div>
}

@* <div class="alert alert-warning">
    @ViewData["Message"]
</div> 

<div class="alert alert-success">
    @ViewBag.Message
</div> *@

<h1>All Employees</h1>
<br />
<br />

<a asp-controller="Employee" asp-action="Create" class="btn btn-primary">Create New Employee</a>

<br />

<div class="row justify-content-center align-items-center mt-5">
    <form asp-action="Index" class="row col-8 offset-2">
        <div class="col-8">
            <input type="text" class="form-control" name="searchInput" id="searchInput" placeholder="Search By Name" />
        </div>
        <div class="col-4">
            <input type="submit" value="Search" class="btn btn-success" />
        </div>

    </form>

</div>


@if (Model.Count() > 0)
{
    <table class="mt-4 table table-striped table-hover">
        <thead>
            <tr>
                <th>Image</th>
                <th>@Html.DisplayNameFor(E => E.Name)</th>
                <th>@Html.DisplayNameFor(E => E.Age)</th>
                <th>@Html.DisplayNameFor(E => E.Salary)</th>
                <th>@Html.DisplayNameFor(E => E.Department)</th>
                <th>@Html.DisplayNameFor(E => E.IsActive)</th>
                @* <th>@Html.DisplayNameFor(E => E.PhoneNumber)</th> *@
                <th>@Html.DisplayNameFor(E => E.Gender)</th>
                @* <th>@Html.DisplayNameFor(E => E.EmployeeType)</th> *@
                @* <th>@Html.DisplayNameFor(E => E.HiringDate)</th> *@
                <th>@Html.DisplayNameFor(E => E.Email)</th>
                <th>
                    Details
                </th>
                <th>
                    Update
                </th>
                <th>
                    Delete Using New Page
                </th>
                <th>
                    Delete Using Modal
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in Model)
            {
                <tr>
                    <td>
                        <img src="~/Files/Images/@employee.ImageName" width="75" class="img-fluid rounded-circle" alt="Employee Image" />
                    </td>
                    <td>@employee.Name</td>
                    <td>@employee.Age</td>
                    <td>@Html.DisplayFor(M => employee.Salary)</td>
                    <td>@employee.Department?.Name</td>
                    <td>@Html.DisplayFor(M => employee.IsActive)</td>
                    @* <td>@employee.PhoneNumber</td> *@
                    <td>@employee.Gender</td>
                    @* <td>@employee.EmployeeType</td> *@
                    @* <td>@employee.HiringDate</td> *@
                    <td>@Html.DisplayFor(M => employee.Email)</td>
                    <partial name="_ButtonsPartial" model="@employee.Id"/>
                </tr>
            }

        </tbody>

    </table>
}
else
{
    <div class="mt-4 alert alert-warning">
        <h3>There is No Employees :(</h3>
    </div>
}


<script>
    const searchBar = $('#searchInput');
    const table = $('table');

    searchBar.on('keyup', function(event) {
        var searchValue = searchBar.val();

        $.ajax({
            url: '/Employee/Search',
            type: 'Get',
            data: { searchInput: searchValue },
            success: function (result) {
                table.html(result);
            },
            error: function (xhr, status, error) {
                console.log(error)
            }
        })
    })


</script>